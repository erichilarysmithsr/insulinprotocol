/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../src/app/patient.component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '../../../src/app/patient-provider.service';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '../../../src/app/server.service';
import * as import10 from '@angular/router/src/router_state';
import * as import11 from '@angular/material/toolbar/toolbar';
import * as import12 from '../../node_modules/@angular/material/core/compatibility/compatibility.ngfactory';
import * as import13 from '../../node_modules/@angular/material/toolbar/toolbar.ngfactory';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '../../node_modules/@angular/router/src/directives/router_outlet.ngfactory';
import * as import16 from '@angular/core/src/change_detection/change_detection_util';
import * as import17 from '@angular/material/core/compatibility/compatibility';
import * as import18 from '@angular/core/src/linker/element_ref';
import * as import19 from '@angular/router/src/router_outlet_map';
import * as import20 from '@angular/core/src/linker/component_factory_resolver';
import * as import21 from '@angular/router/src/directives/router_outlet';
export class Wrapper_PatientComponent {
  /*private*/ _eventHandler:Function;
  context:import0.PatientComponent;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.PatientComponent(p0,p1);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_PatientComponent_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_PatientComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.PatientComponent>;
  _PatientProvider_0_3:import5.PatientProvider;
  _PatientComponent_0_4:Wrapper_PatientComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_PatientComponent_Host0,renderType_PatientComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ng-component',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_PatientComponent0(this.viewUtils,this,0,this._el_0);
    this._PatientProvider_0_3 = new import5.PatientProvider(this.injectorGet(import9.Server,this.parentIndex));
    this._PatientComponent_0_4 = new Wrapper_PatientComponent(this._PatientProvider_0_3,this.injectorGet(import10.ActivatedRoute,this.parentIndex));
    this.compView_0.create(this._PatientComponent_0_4.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._PatientComponent_0_4.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import5.PatientProvider) && (0 === requestNodeIndex))) { return this._PatientProvider_0_3; }
    if (((token === import0.PatientComponent) && (0 === requestNodeIndex))) { return this._PatientComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._PatientComponent_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const PatientComponentNgFactory:import8.ComponentFactory<import0.PatientComponent> = new import8.ComponentFactory<import0.PatientComponent>('ng-component',View_PatientComponent_Host0,import0.PatientComponent);
const styles_PatientComponent:any[] = ([] as any[]);
var renderType_PatientComponent:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_PatientComponent,{});
export class View_PatientComponent0 extends import1.AppView<import0.PatientComponent> {
  _text_0:any;
  _el_1:any;
  compView_1:import1.AppView<import11.MdToolbar>;
  _MdPrefixRejector_1_3:import12.Wrapper_MdPrefixRejector;
  _MdToolbar_1_4:import13.Wrapper_MdToolbar;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  _text_6:any;
  _el_7:any;
  /*private*/ _vc_7:import14.ViewContainer;
  _RouterOutlet_7_5:import15.Wrapper_RouterOutlet;
  _text_8:any;
  /*private*/ _expr_14:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_PatientComponent0,renderType_PatientComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
    this._expr_14 = import16.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n		',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'md-toolbar',new import3.InlineArray8(6,'color','primary','role','toolbar','style','margin:0 0 10px 0;'),(null as any));
    this.compView_1 = new import13.View_MdToolbar0(this.viewUtils,this,1,this._el_1);
    this._MdPrefixRejector_1_3 = new import12.Wrapper_MdPrefixRejector(this.parentView.injectorGet(import17.MATERIAL_COMPATIBILITY_MODE,this.parentIndex,(null as any)));
    this._MdToolbar_1_4 = new import13.Wrapper_MdToolbar(new import18.ElementRef(this._el_1),this.renderer);
    this._text_2 = this.renderer.createText((null as any),'\n			',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,(null as any),'span',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_4 = this.renderer.createText(this._el_3,'',(null as any));
    this._text_5 = this.renderer.createText((null as any),'\n		',(null as any));
    this.compView_1.create(this._MdToolbar_1_4.context);
    this._text_6 = this.renderer.createText(parentRenderNode,'\n		',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,parentRenderNode,'router-outlet',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._vc_7 = new import14.ViewContainer(7,(null as any),this,this._el_7);
    this._RouterOutlet_7_5 = new import15.Wrapper_RouterOutlet(this.parentView.injectorGet(import19.RouterOutletMap,this.parentIndex),this._vc_7.vcRef,this.parentView.injectorGet(import20.ComponentFactoryResolver,this.parentIndex),(null as any));
    this._text_8 = this.renderer.createText(parentRenderNode,'\n	',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._text_6,
      this._el_7,
      this._text_8
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.MdPrefixRejector) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 5)))) { return this._MdPrefixRejector_1_3.context; }
    if (((token === import11.MdToolbar) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 5)))) { return this._MdToolbar_1_4.context; }
    if (((token === import21.RouterOutlet) && (7 === requestNodeIndex))) { return this._RouterOutlet_7_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._MdPrefixRejector_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_1_1_0:any = 'primary';
    this._MdToolbar_1_4.check_color(currVal_1_1_0,throwOnChange,false);
    if (this._MdToolbar_1_4.ngDoCheck(this,this._el_1,throwOnChange)) { this.compView_1.markAsCheckOnce(); }
    this._RouterOutlet_7_5.ngDoCheck(this,this._el_7,throwOnChange);
    this._vc_7.detectChangesInNestedViews(throwOnChange);
    this._MdToolbar_1_4.checkHost(this,this.compView_1,this._el_1,throwOnChange);
    const currVal_14:any = import3.inlineInterpolate(1,'',(this.context.pp.patient.id? this.context.pp.patient.name: 'New Patient'),'');
    if (import3.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      this.renderer.setText(this._text_4,currVal_14);
      this._expr_14 = currVal_14;
    }
    this.compView_1.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_7.destroyNestedViews();
    this.compView_1.destroy();
    this._RouterOutlet_7_5.ngOnDestroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 1) && (ngContentIndex == 0))) {
      cb(this._text_2,ctx);
      cb(this._el_3,ctx);
      cb(this._text_5,ctx);
    }
    if (((nodeIndex == 1) && (ngContentIndex == 1))) {  }
  }
}