/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as import0 from '../../../src/app/patient-list.component';
import * as import1 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/constants';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../../src/app/server.service';
import * as import9 from '@angular/router/src/router';
import * as import10 from '../../../src/app/auth.service';
import * as import11 from './patient-list.component.css.shim.ngstyle';
import * as import12 from '@angular/material/card/card';
import * as import13 from '../../node_modules/@angular/material/core/compatibility/compatibility.ngfactory';
import * as import14 from '../../node_modules/@angular/material/card/card.ngfactory';
import * as import15 from '@angular/core/src/linker/view_container';
import * as import16 from '@angular/core/src/change_detection/change_detection_util';
import * as import17 from '@angular/material/core/compatibility/compatibility';
import * as import18 from '@angular/material/button/button';
import * as import19 from '../../node_modules/@angular/material/button/button.ngfactory';
import * as import20 from '@angular/core/src/linker/element_ref';
import * as import21 from '@angular/material/toolbar/toolbar';
import * as import22 from '../../node_modules/@angular/material/toolbar/toolbar.ngfactory';
import * as import23 from '@angular/material/input/input-container';
import * as import24 from '../../node_modules/@angular/material/input/input-container.ngfactory';
import * as import25 from '@angular/core/src/linker/query_list';
import * as import26 from '../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import27 from '../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import28 from '@angular/forms/src/directives/ng_control';
import * as import29 from '@angular/core/src/linker/template_ref';
import * as import30 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import31 from '@angular/common/src/directives/ng_for';
import * as import32 from '@angular/common/src/directives/ng_if';
var Wrapper_PatientListComponent = (function () {
    function Wrapper_PatientListComponent(p0, p1, p2) {
        this._changed = false;
        this.context = new import0.PatientListComponent(p0, p1, p2);
    }
    Wrapper_PatientListComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_PatientListComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_PatientListComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_PatientListComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_PatientListComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_PatientListComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_PatientListComponent;
}());
export { Wrapper_PatientListComponent };
var renderType_PatientListComponent_Host = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.None, [], {});
var View_PatientListComponent_Host0 = (function (_super) {
    __extends(View_PatientListComponent_Host0, _super);
    function View_PatientListComponent_Host0(viewUtils, parentView, parentIndex, parentElement) {
        return _super.call(this, View_PatientListComponent_Host0, renderType_PatientListComponent_Host, import5.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways) || this;
    }
    View_PatientListComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'patient-list', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_PatientListComponent0(this.viewUtils, this, 0, this._el_0);
        this._PatientListComponent_0_3 = new Wrapper_PatientListComponent(this.injectorGet(import8.Server, this.parentIndex), this.injectorGet(import9.Router, this.parentIndex), this.injectorGet(import10.AuthService, this.parentIndex));
        this.compView_0.create(this._PatientListComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._PatientListComponent_0_3.context);
    };
    View_PatientListComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.PatientListComponent) && (0 === requestNodeIndex))) {
            return this._PatientListComponent_0_3.context;
        }
        return notFoundResult;
    };
    View_PatientListComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._PatientListComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    };
    View_PatientListComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_PatientListComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_PatientListComponent_Host0;
}(import1.AppView));
export var PatientListComponentNgFactory = new import7.ComponentFactory('patient-list', View_PatientListComponent_Host0, import0.PatientListComponent);
var styles_PatientListComponent = [import11.styles];
var View_PatientListComponent1 = (function (_super) {
    __extends(View_PatientListComponent1, _super);
    function View_PatientListComponent1(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        var _this = _super.call(this, View_PatientListComponent1, renderType_PatientListComponent, import5.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways, declaredViewContainer) || this;
        _this._expr_32 = import16.UNINITIALIZED;
        _this._expr_33 = import16.UNINITIALIZED;
        _this._expr_34 = import16.UNINITIALIZED;
        return _this;
    }
    View_PatientListComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'md-card', import3.EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new import14.View_MdCard0(this.viewUtils, this, 0, this._el_0);
        this._MdPrefixRejector_0_3 = new import13.Wrapper_MdPrefixRejector(this.parentView.parentView.injectorGet(import17.MATERIAL_COMPATIBILITY_MODE, this.parentView.parentIndex, null));
        this._MdCard_0_4 = new import14.Wrapper_MdCard();
        this._text_1 = this.renderer.createText(null, '\n		', null);
        this._el_2 = import3.createRenderElement(this.renderer, null, 'md-card-title', new import3.InlineArray2(2, 'style', 'cursor:pointer;'), null);
        this._MdPrefixRejector_2_3 = new import13.Wrapper_MdPrefixRejector(this.parentView.parentView.injectorGet(import17.MATERIAL_COMPATIBILITY_MODE, this.parentView.parentIndex, null));
        this._MdCardTitle_2_4 = new import14.Wrapper_MdCardTitle();
        this._text_3 = this.renderer.createText(this._el_2, '\n			', null);
        this._el_4 = import3.createRenderElement(this.renderer, this._el_2, 'span', import3.EMPTY_INLINE_ARRAY, null);
        this._text_5 = this.renderer.createText(this._el_4, '', null);
        this._text_6 = this.renderer.createText(this._el_2, '\n			', null);
        this._el_7 = import3.createRenderElement(this.renderer, this._el_2, 'i', new import3.InlineArray2(2, 'class', 'material-icons fright'), null);
        this._text_8 = this.renderer.createText(this._el_7, 'list', null);
        this._text_9 = this.renderer.createText(this._el_2, '\n			', null);
        this._el_10 = import3.createRenderElement(this.renderer, this._el_2, 'i', new import3.InlineArray2(2, 'class', 'material-icons fright'), null);
        this._text_11 = this.renderer.createText(this._el_10, 'mode_edit', null);
        this._text_12 = this.renderer.createText(this._el_2, '\n		', null);
        this._text_13 = this.renderer.createText(null, '\n		\n		', null);
        this._el_14 = import3.createRenderElement(this.renderer, null, 'div', import3.EMPTY_INLINE_ARRAY, null);
        this._text_15 = this.renderer.createText(this._el_14, '\n			', null);
        this._el_16 = import3.createRenderElement(this.renderer, this._el_14, 'div', new import3.InlineArray2(2, 'class', 'fright halfwidth'), null);
        this._el_17 = import3.createRenderElement(this.renderer, this._el_16, 'label', import3.EMPTY_INLINE_ARRAY, null);
        this._text_18 = this.renderer.createText(this._el_17, 'Bed Number: ', null);
        this._text_19 = this.renderer.createText(this._el_16, '', null);
        this._text_20 = this.renderer.createText(this._el_14, '\n			', null);
        this._el_21 = import3.createRenderElement(this.renderer, this._el_14, 'div', new import3.InlineArray2(2, 'class', 'halfwidth'), null);
        this._el_22 = import3.createRenderElement(this.renderer, this._el_21, 'label', import3.EMPTY_INLINE_ARRAY, null);
        this._text_23 = this.renderer.createText(this._el_22, 'UHID: ', null);
        this._text_24 = this.renderer.createText(this._el_21, '', null);
        this._text_25 = this.renderer.createText(this._el_14, '		\n		', null);
        this._text_26 = this.renderer.createText(null, '\n	', null);
        this.compView_0.create(this._MdCard_0_4.context);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_4, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_4));
        var disposable_1 = import3.subscribeToRenderElement(this, this._el_7, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_7));
        var disposable_2 = import3.subscribeToRenderElement(this, this._el_10, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_10));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._text_9,
            this._el_10,
            this._text_11,
            this._text_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._el_16,
            this._el_17,
            this._text_18,
            this._text_19,
            this._text_20,
            this._el_21,
            this._el_22,
            this._text_23,
            this._text_24,
            this._text_25,
            this._text_26
        ]), [
            disposable_0,
            disposable_1,
            disposable_2
        ]);
        return null;
    };
    View_PatientListComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.MdPrefixRejector) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 12)))) {
            return this._MdPrefixRejector_2_3.context;
        }
        if (((token === import12.MdCardTitle) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 12)))) {
            return this._MdCardTitle_2_4.context;
        }
        if (((token === import17.MdPrefixRejector) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 26)))) {
            return this._MdPrefixRejector_0_3.context;
        }
        if (((token === import12.MdCard) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 26)))) {
            return this._MdCard_0_4.context;
        }
        return notFoundResult;
    };
    View_PatientListComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        this._MdPrefixRejector_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        if (this._MdCard_0_4.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this._MdPrefixRejector_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        this._MdCardTitle_2_4.ngDoCheck(this, this._el_2, throwOnChange);
        this._MdCard_0_4.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this._MdCardTitle_2_4.checkHost(this, this, this._el_2, throwOnChange);
        var currVal_32 = import3.inlineInterpolate(1, '', this.context.$implicit.name, '');
        if (import3.checkBinding(throwOnChange, this._expr_32, currVal_32)) {
            this.renderer.setText(this._text_5, currVal_32);
            this._expr_32 = currVal_32;
        }
        var currVal_33 = import3.inlineInterpolate(1, '', this.context.$implicit.bednum, '');
        if (import3.checkBinding(throwOnChange, this._expr_33, currVal_33)) {
            this.renderer.setText(this._text_19, currVal_33);
            this._expr_33 = currVal_33;
        }
        var currVal_34 = import3.inlineInterpolate(1, ' ', this.context.$implicit.uhid, '');
        if (import3.checkBinding(throwOnChange, this._expr_34, currVal_34)) {
            this.renderer.setText(this._text_24, currVal_34);
            this._expr_34 = currVal_34;
        }
        this.compView_0.internalDetectChanges(throwOnChange);
    };
    View_PatientListComponent1.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_PatientListComponent1.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_PatientListComponent1.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) {
            cb(this._text_1, ctx);
            cb(this._el_2, ctx);
            cb(this._text_13, ctx);
            cb(this._el_14, ctx);
            cb(this._text_26, ctx);
        }
    };
    View_PatientListComponent1.prototype.handleEvent_4 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.parentView.context.showForm(this.context.$implicit.id) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    View_PatientListComponent1.prototype.handleEvent_7 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.parentView.context.formsList(this.context.$implicit.id) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    View_PatientListComponent1.prototype.handleEvent_10 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.parentView.context.editPatient(this.context.$implicit.id) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return View_PatientListComponent1;
}(import1.AppView));
var View_PatientListComponent2 = (function (_super) {
    __extends(View_PatientListComponent2, _super);
    function View_PatientListComponent2(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        return _super.call(this, View_PatientListComponent2, renderType_PatientListComponent, import5.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways, declaredViewContainer) || this;
    }
    View_PatientListComponent2.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'div', new import3.InlineArray2(2, 'style', 'text-align:center;'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n		', null);
        this._el_2 = import3.createRenderElement(this.renderer, this._el_0, 'div', new import3.InlineArray2(2, 'style', 'margin:2em auto;'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n			No patient found', null);
        this._el_4 = import3.createRenderElement(this.renderer, this._el_2, 'br', import3.EMPTY_INLINE_ARRAY, null);
        this._el_5 = import3.createRenderElement(this.renderer, this._el_2, 'br', import3.EMPTY_INLINE_ARRAY, null);
        this._text_6 = this.renderer.createText(this._el_2, 'Add a new patient to proceed	\n		', null);
        this._text_7 = this.renderer.createText(this._el_0, '	\n		', null);
        this._el_8 = import3.createRenderElement(this.renderer, this._el_0, 'div', new import3.InlineArray2(2, 'style', 'margin:1em auto;'), null);
        this._text_9 = this.renderer.createText(this._el_8, '\n			', null);
        this._el_10 = import3.createRenderElement(this.renderer, this._el_8, 'button', new import3.InlineArray2(2, 'md-raised-button', ''), null);
        this.compView_10 = new import19.View_MdButton0(this.viewUtils, this, 10, this._el_10);
        this._MdPrefixRejector_10_3 = new import13.Wrapper_MdPrefixRejector(this.parentView.parentView.injectorGet(import17.MATERIAL_COMPATIBILITY_MODE, this.parentView.parentIndex, null));
        this._MdButton_10_4 = new import19.Wrapper_MdButton(new import20.ElementRef(this._el_10), this.renderer);
        this._MdRaisedButtonCssMatStyler_10_5 = new import19.Wrapper_MdRaisedButtonCssMatStyler();
        this._text_11 = this.renderer.createText(null, 'Add a patient', null);
        this.compView_10.create(this._MdButton_10_4.context);
        this._text_12 = this.renderer.createText(this._el_8, '	\n		', null);
        this._text_13 = this.renderer.createText(this._el_0, '	\n	', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_10, new import3.InlineArray8(8, 'click', null, 'mousedown', null, 'focus', null, 'blur', null), this.eventHandler(this.handleEvent_10));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._el_5,
            this._text_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._el_10,
            this._text_11,
            this._text_12,
            this._text_13
        ]), [disposable_0]);
        return null;
    };
    View_PatientListComponent2.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.MdPrefixRejector) && ((10 <= requestNodeIndex) && (requestNodeIndex <= 11)))) {
            return this._MdPrefixRejector_10_3.context;
        }
        if (((token === import18.MdButton) && ((10 <= requestNodeIndex) && (requestNodeIndex <= 11)))) {
            return this._MdButton_10_4.context;
        }
        if (((token === import18.MdRaisedButtonCssMatStyler) && ((10 <= requestNodeIndex) && (requestNodeIndex <= 11)))) {
            return this._MdRaisedButtonCssMatStyler_10_5.context;
        }
        return notFoundResult;
    };
    View_PatientListComponent2.prototype.detectChangesInternal = function (throwOnChange) {
        this._MdPrefixRejector_10_3.ngDoCheck(this, this._el_10, throwOnChange);
        if (this._MdButton_10_4.ngDoCheck(this, this._el_10, throwOnChange)) {
            this.compView_10.markAsCheckOnce();
        }
        this._MdRaisedButtonCssMatStyler_10_5.ngDoCheck(this, this._el_10, throwOnChange);
        this._MdButton_10_4.checkHost(this, this.compView_10, this._el_10, throwOnChange);
        this._MdRaisedButtonCssMatStyler_10_5.checkHost(this, this.compView_10, this._el_10, throwOnChange);
        this.compView_10.internalDetectChanges(throwOnChange);
    };
    View_PatientListComponent2.prototype.destroyInternal = function () {
        this.compView_10.destroy();
    };
    View_PatientListComponent2.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_PatientListComponent2.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 10) && (ngContentIndex == 0))) {
            cb(this._text_11, ctx);
        }
    };
    View_PatientListComponent2.prototype.handleEvent_10 = function (eventName, $event) {
        this.compView_10.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._MdButton_10_4.handleEvent(eventName, $event) && result);
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.parentView.context.newPatient(this.parentView._el_20.value) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return View_PatientListComponent2;
}(import1.AppView));
var renderType_PatientListComponent = import3.createRenderComponentType('', 0, import4.ViewEncapsulation.Emulated, styles_PatientListComponent, {});
var View_PatientListComponent0 = (function (_super) {
    __extends(View_PatientListComponent0, _super);
    function View_PatientListComponent0(viewUtils, parentView, parentIndex, parentElement) {
        return _super.call(this, View_PatientListComponent0, renderType_PatientListComponent, import5.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import6.ChangeDetectorStatus.CheckAlways) || this;
    }
    View_PatientListComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'topfixed'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n	', null);
        this._el_2 = import3.createRenderElement(this.renderer, this._el_0, 'md-toolbar', new import3.InlineArray4(4, 'color', 'primary', 'role', 'toolbar'), null);
        this.compView_2 = new import22.View_MdToolbar0(this.viewUtils, this, 2, this._el_2);
        this._MdPrefixRejector_2_3 = new import13.Wrapper_MdPrefixRejector(this.parentView.injectorGet(import17.MATERIAL_COMPATIBILITY_MODE, this.parentIndex, null));
        this._MdToolbar_2_4 = new import22.Wrapper_MdToolbar(new import20.ElementRef(this._el_2), this.renderer);
        this._text_3 = this.renderer.createText(null, '\n		', null);
        this._el_4 = import3.createRenderElement(this.renderer, null, 'span', import3.EMPTY_INLINE_ARRAY, null);
        this._text_5 = this.renderer.createText(this._el_4, 'Glucose control advisor', null);
        this._text_6 = this.renderer.createText(null, '\n		', null);
        this._el_7 = import3.createRenderElement(this.renderer, null, 'span', new import3.InlineArray2(2, 'class', 'filler'), null);
        this._text_8 = this.renderer.createText(null, '\n		', null);
        this._el_9 = import3.createRenderElement(this.renderer, null, 'i', new import3.InlineArray2(2, 'class', 'material-icons'), null);
        this._text_10 = this.renderer.createText(this._el_9, 'assignment', null);
        this._text_11 = this.renderer.createText(null, '\n		', null);
        this._el_12 = import3.createRenderElement(this.renderer, null, 'i', new import3.InlineArray2(2, 'class', 'material-icons'), null);
        this._text_13 = this.renderer.createText(this._el_12, 'account_circle', null);
        this._text_14 = this.renderer.createText(null, '\n	', null);
        this.compView_2.create(this._MdToolbar_2_4.context);
        this._text_15 = this.renderer.createText(this._el_0, '\n	', null);
        this._el_16 = import3.createRenderElement(this.renderer, this._el_0, 'div', new import3.InlineArray2(2, 'style', 'padding:5px;'), null);
        this._text_17 = this.renderer.createText(this._el_16, '\n		', null);
        this._el_18 = import3.createRenderElement(this.renderer, this._el_16, 'md-input-container', new import3.InlineArray2(2, 'style', 'width:100%;'), null);
        this.compView_18 = new import24.View_MdInputContainer0(this.viewUtils, this, 18, this._el_18);
        this._MdInputContainer_18_3 = new import24.Wrapper_MdInputContainer();
        this._query_MdInputDirective_18_0 = new import25.QueryList();
        this._query_MdPlaceholder_18_1 = new import25.QueryList();
        this._query_MdHint_18_2 = new import25.QueryList();
        this._text_19 = this.renderer.createText(null, '\n			', null);
        this._el_20 = import3.createRenderElement(this.renderer, null, 'input', new import3.InlineArray8(8, 'mdInput', '', 'name', 'search', 'placeholder', 'Search by UHID', 'type', 'search'), null);
        this._MdInputDirective_20_3 = new import24.Wrapper_MdInputDirective(new import20.ElementRef(this._el_20), this.renderer, this.parentView.injectorGet(import28.NgControl, this.parentIndex, null));
        this._text_21 = this.renderer.createText(null, '\n		', null);
        this.compView_18.create(this._MdInputContainer_18_3.context);
        this._text_22 = this.renderer.createText(this._el_16, '\n	', null);
        this._text_23 = this.renderer.createText(this._el_0, '\n', null);
        this._text_24 = this.renderer.createText(parentRenderNode, '\n', null);
        this._el_25 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'style', 'padding:120px 5px 0 5px;box-sizing:border-box;overflow:scroll;height:100%;'), null);
        this._text_26 = this.renderer.createText(this._el_25, '	\n	', null);
        this._anchor_27 = this.renderer.createTemplateAnchor(this._el_25, null);
        this._vc_27 = new import15.ViewContainer(27, 25, this, this._anchor_27);
        this._TemplateRef_27_5 = new import29.TemplateRef_(this, 27, this._anchor_27);
        this._NgFor_27_6 = new import26.Wrapper_NgFor(this._vc_27.vcRef, this._TemplateRef_27_5, this.parentView.injectorGet(import30.IterableDiffers, this.parentIndex), this.ref);
        this._text_28 = this.renderer.createText(this._el_25, '\n	', null);
        this._anchor_29 = this.renderer.createTemplateAnchor(this._el_25, null);
        this._vc_29 = new import15.ViewContainer(29, 25, this, this._anchor_29);
        this._TemplateRef_29_5 = new import29.TemplateRef_(this, 29, this._anchor_29);
        this._NgIf_29_6 = new import27.Wrapper_NgIf(this._vc_29.vcRef, this._TemplateRef_29_5);
        this._text_30 = this.renderer.createText(this._el_25, '\n	\n', null);
        this._text_31 = this.renderer.createText(parentRenderNode, '\n', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_18, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_18));
        var disposable_1 = import3.subscribeToRenderElement(this, this._el_20, new import3.InlineArray8(8, 'keyup', null, 'blur', null, 'focus', null, 'input', null), this.eventHandler(this.handleEvent_20));
        this._query_MdInputDirective_18_0.reset([this._MdInputDirective_20_3.context]);
        this._MdInputContainer_18_3.context._mdInputChild = this._query_MdInputDirective_18_0.first;
        this._query_MdPlaceholder_18_1.reset([]);
        this._MdInputContainer_18_3.context._placeholderChild = this._query_MdPlaceholder_18_1.first;
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._el_9,
            this._text_10,
            this._text_11,
            this._el_12,
            this._text_13,
            this._text_14,
            this._text_15,
            this._el_16,
            this._text_17,
            this._el_18,
            this._text_19,
            this._el_20,
            this._text_21,
            this._text_22,
            this._text_23,
            this._text_24,
            this._el_25,
            this._text_26,
            this._anchor_27,
            this._text_28,
            this._anchor_29,
            this._text_30,
            this._text_31
        ]), [
            disposable_0,
            disposable_1
        ]);
        return null;
    };
    View_PatientListComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import17.MdPrefixRejector) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 14)))) {
            return this._MdPrefixRejector_2_3.context;
        }
        if (((token === import21.MdToolbar) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 14)))) {
            return this._MdToolbar_2_4.context;
        }
        if (((token === import23.MdInputDirective) && (20 === requestNodeIndex))) {
            return this._MdInputDirective_20_3.context;
        }
        if (((token === import23.MdInputContainer) && ((18 <= requestNodeIndex) && (requestNodeIndex <= 21)))) {
            return this._MdInputContainer_18_3.context;
        }
        if (((token === import29.TemplateRef) && (27 === requestNodeIndex))) {
            return this._TemplateRef_27_5;
        }
        if (((token === import31.NgFor) && (27 === requestNodeIndex))) {
            return this._NgFor_27_6.context;
        }
        if (((token === import29.TemplateRef) && (29 === requestNodeIndex))) {
            return this._TemplateRef_29_5;
        }
        if (((token === import32.NgIf) && (29 === requestNodeIndex))) {
            return this._NgIf_29_6.context;
        }
        return notFoundResult;
    };
    View_PatientListComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        this._MdPrefixRejector_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_2_1_0 = 'primary';
        this._MdToolbar_2_4.check_color(currVal_2_1_0, throwOnChange, false);
        if (this._MdToolbar_2_4.ngDoCheck(this, this._el_2, throwOnChange)) {
            this.compView_2.markAsCheckOnce();
        }
        this._MdInputContainer_18_3.ngDoCheck(this, this._el_18, throwOnChange);
        var currVal_20_0_0 = 'Search by UHID';
        this._MdInputDirective_20_3.check_placeholder(currVal_20_0_0, throwOnChange, false);
        var currVal_20_0_1 = 'search';
        this._MdInputDirective_20_3.check_type(currVal_20_0_1, throwOnChange, false);
        this._MdInputDirective_20_3.ngDoCheck(this, this._el_20, throwOnChange);
        var currVal_27_0_0 = this.context.patients;
        this._NgFor_27_6.check_ngForOf(currVal_27_0_0, throwOnChange, false);
        this._NgFor_27_6.ngDoCheck(this, this._anchor_27, throwOnChange);
        var currVal_29_0_0 = (!this.context.patients || !this.context.patients.length);
        this._NgIf_29_6.check_ngIf(currVal_29_0_0, throwOnChange, false);
        this._NgIf_29_6.ngDoCheck(this, this._anchor_29, throwOnChange);
        this._vc_27.detectChangesInNestedViews(throwOnChange);
        this._vc_29.detectChangesInNestedViews(throwOnChange);
        if (!throwOnChange) {
            if (this._query_MdHint_18_2.dirty) {
                this._query_MdHint_18_2.reset([]);
                this._MdInputContainer_18_3.context._hintChildren = this._query_MdHint_18_2;
                this._query_MdHint_18_2.notifyOnChanges();
            }
            if ((this.numberOfChecks === 0)) {
                this._MdInputContainer_18_3.context.ngAfterContentInit();
            }
        }
        this._MdToolbar_2_4.checkHost(this, this.compView_2, this._el_2, throwOnChange);
        this._MdInputContainer_18_3.checkHost(this, this.compView_18, this._el_18, throwOnChange);
        this._MdInputDirective_20_3.checkHost(this, this, this._el_20, throwOnChange);
        this.compView_2.internalDetectChanges(throwOnChange);
        this.compView_18.internalDetectChanges(throwOnChange);
    };
    View_PatientListComponent0.prototype.destroyInternal = function () {
        this._vc_27.destroyNestedViews();
        this._vc_29.destroyNestedViews();
        this.compView_2.destroy();
        this.compView_18.destroy();
        this._MdInputDirective_20_3.ngOnDestroy();
    };
    View_PatientListComponent0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 2) && (ngContentIndex == 0))) {
            cb(this._text_3, ctx);
            cb(this._el_4, ctx);
            cb(this._text_6, ctx);
            cb(this._el_7, ctx);
            cb(this._text_8, ctx);
            cb(this._el_9, ctx);
            cb(this._text_11, ctx);
            cb(this._el_12, ctx);
            cb(this._text_14, ctx);
        }
        if (((nodeIndex == 2) && (ngContentIndex == 1))) { }
        if (((nodeIndex == 18) && (ngContentIndex == 0))) { }
        if (((nodeIndex == 18) && (ngContentIndex == 1))) {
            cb(this._text_19, ctx);
            cb(this._el_20, ctx);
            cb(this._text_21, ctx);
        }
        if (((nodeIndex == 18) && (ngContentIndex == 2))) { }
        if (((nodeIndex == 18) && (ngContentIndex == 3))) { }
        if (((nodeIndex == 18) && (ngContentIndex == 4))) { }
    };
    View_PatientListComponent0.prototype.createEmbeddedViewInternal = function (nodeIndex) {
        if ((nodeIndex == 27)) {
            return new View_PatientListComponent1(this.viewUtils, this, 27, this._anchor_27, this._vc_27);
        }
        if ((nodeIndex == 29)) {
            return new View_PatientListComponent2(this.viewUtils, this, 29, this._anchor_29, this._vc_29);
        }
        return null;
    };
    View_PatientListComponent0.prototype.handleEvent_18 = function (eventName, $event) {
        this.compView_18.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._MdInputContainer_18_3.handleEvent(eventName, $event) && result);
        return result;
    };
    View_PatientListComponent0.prototype.handleEvent_20 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._MdInputDirective_20_3.handleEvent(eventName, $event) && result);
        if ((eventName == 'keyup')) {
            var pd_sub_0 = ((($event.keyCode == 13) && this.context.onSearch(this._el_20.value)) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return View_PatientListComponent0;
}(import1.AppView));
export { View_PatientListComponent0 };
//# sourceMappingURL=patient-list.component.ngfactory.js.map